<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>AURA 사용자 웹페이지</title>
  <!-- Bootstrap CSS 및 JS 불러오기 -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" crossorigin="anonymous" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
  <!-- Chart.js 및 Luxon(시간 처리) 관련 라이브러리 불러오기 -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/luxon@3/build/global/luxon.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.3.0"></script>
  <style>
    body { background-color: #f4f6fa; }
    .gallery-img { width: 100%; height: 100%; border-radius: 8px; cursor: pointer; }
    .video-card { background: white; border-radius: 12px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); padding: 1rem; margin-bottom: 1.5rem; }
  </style>
</head>
<body>

<!-- Hero Section (웹페이지 상단 디자인) -->
<section class="bg-dark text-white py-5">
  <div class="container text-center">
    <h1 class="display-3 fw-bold">AURA</h1>
    <p class="lead">: Autism Understanding & Response Assistant</p>
  </div>
</section>

<!-- Gallery Section (영상 갤러리) -->
<section class="py-5">
  <div class="container">
    <h2 class="mb-4">영상 갤러리</h2>
    <div class="d-flex justify-content-end mb-3">
      <input type="date" id="search-date" class="form-control w-auto" style="width: 200px;" placeholder="날짜를 선택하세요" />
    </div>
    <div class="row" id="video-gallery"></div>
    <div class="d-flex justify-content-center mt-4">
      <button id="loadMoreBtn" class="btn btn-outline-primary">더보기</button>
    </div>
  </div>
</section>

<!-- S3 버킷 영상 목록 불러오기 및 갤러리 표시 -->
<script>
  const BUCKET_URL = "https://in-aura-bucket.s3.ap-northeast-2.amazonaws.com/";
  const uploadedSet = new Set();
  let s3VideoKeys = [];

  let currentIndex = 0;
  const PAGE_SIZE = 9;

  // S3 버킷에서 영상 파일 목록을 불러옴
  async function fetchS3Videos() {
  try {
    const res = await fetch(`${BUCKET_URL}?list-type=2`);
    const xmlText = await res.text();
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(xmlText, "application/xml");
    const keys = Array.from(xmlDoc.getElementsByTagName("Key")).map(el => el.textContent);
    const videoKeys = keys.filter(key => key.endsWith(".mp4") || key.endsWith(".avi"));

    // 최신 영상 9개 로드, 이후 더보기 더튼 눌러 9개씩 추가 로딩
    s3VideoKeys = videoKeys.sort((a, b) => b.localeCompare(a)); 
    loadMoreVideos(); 
  } catch (err) {
    console.error("❌ S3 목록 로딩 실패:", err);
  }
}

async function loadMoreVideos() {
  const nextIndex = currentIndex + PAGE_SIZE;
  const slice = s3VideoKeys.slice(currentIndex, nextIndex);

  for (const key of slice) {
    if (!uploadedSet.has(key)) {
      await addVideoToGallery(BUCKET_URL + key, key);
      uploadedSet.add(key);
    }
  }

  currentIndex = nextIndex;

  if (currentIndex >= s3VideoKeys.length) {
    document.getElementById("loadMoreBtn").style.display = "none";
  }
}

document.addEventListener("DOMContentLoaded", () => {
  document.getElementById("loadMoreBtn").addEventListener("click", loadMoreVideos);
});

  // 개별 영상을 갤러리에 추가
  async function addVideoToGallery(url, filename) {
    const col = document.createElement("div");
    col.className = "col-md-4 mb-4";

    const card = document.createElement("div");
    card.className = "video-card";

    const video = document.createElement("video");
    video.src = url;
    video.controls = true;
    video.className = "gallery-img";

    const info = document.createElement("p");
    info.className = "mt-2";
    info.innerHTML = `<strong>파일명:</strong> ${filename}`;

    card.appendChild(video);
    card.appendChild(info);
    col.appendChild(card);
    document.getElementById("video-gallery").appendChild(col);
  }

  // 날짜 검색 필터링 기능
  document.getElementById("search-date").addEventListener("input", e => {
    const value = e.target.value;
    const cards = document.querySelectorAll("#video-gallery .video-card");

    cards.forEach(card => {
      const info = card.querySelector("p").innerText;
      if (!value || info.includes(value)) {
        card.parentElement.style.display = "";
      } else {
        card.parentElement.style.display = "none";
      }
    });
  });
</script>

<!-- Chart Section (오늘, 주간, 월간 그래프) -->
<section class="py-5 bg-light">
  <div class="container">
    <h2 class="mb-4" id="dailyChartTitle">반복 행동 발생 시각 (기준: 선택 날짜)</h2>
    <div class="d-flex justify-content-end mb-3">
      <input type="date" id="daily-date" class="form-control w-auto" style="width: 200px;" />
    </div>
    <canvas id="dailyChart" height="80"></canvas>
    <hr class="my-5" />

    <h2 class="mb-4" id="weeklyChartTitle">1주 동안의 반복 행동 발생 추이</h2>
    <!-- 1주 차트 기간 조정용 버튼 -->
    <div class="d-flex justify-content-end align-items-center gap-2 mb-3">
      <button id="prevRange" class="btn btn-outline-secondary btn-sm">←</button>
      <span id="weekRangeLabel">최근 7일</span>
      <button id="nextRange" class="btn btn-outline-secondary btn-sm">→</button>
    </div>
    <canvas id="weeklyChart" height="100"></canvas>
    <hr class="my-5" />

    <h2 class="mb-4">1년 동안의 반복 행동 발생 추이</h2>
    <!-- 연도 입력 및 검색 버튼 -->
    <div class="d-flex justify-content-end mb-3">
      <input type="number" id="yearInput" class="form-control w-auto" placeholder="연도 입력 (예: 2025)" min="2000" max="2100" style="width: 200px;" />
      <button class="btn btn-primary ms-2" onclick="filterByYear()">검색</button>
    </div>
    <canvas id="monthlyChart" height="80"></canvas>
  </div>
</section>

<script>
  const API_BASE = "http://localhost:5000/api"; // DB API 엔드포인트
  let dailyChart, weeklyChart, monthlyChart;
  let currentWeekRange = 1;
  const { DateTime } = luxon;

// API에서 일별 반복 행동 수집하여 오늘의 차트 표시
async function loadTodayChart(dateStr = null) {
  const targetDate = dateStr || new Date().toISOString().split("T")[0];

  try {
    const res = await fetch(`${API_BASE}/stats/aggregate?type=time&date=${targetDate}`);
    const result = await res.json();

    const points = result.map(entry => {
      // entry._id가 "2025-07-21_08-13" 형식이라면
      const [dateStr, timeStr] = entry._id.split("_");
      const [hh, mm] = timeStr.split("-");
      return {
        x: new Date(`${dateStr}T${hh}:${mm}:00`),
        y: entry.total_repetition
      };
    });

    if (dailyChart) dailyChart.destroy();

    dailyChart = new Chart(document.getElementById("dailyChart"), {
      type: "scatter",
      data: {
        datasets: [{
          label: "시간대별 반복 행동",
          data: points,
          backgroundColor: "#fd7e14",
          pointRadius: 5
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: {
            type: "time",
            time: {
              unit: "hour",
              displayFormats: { hour: "HH:mm" }
            },
            title: { display: true, text: "시간 (hh:mm:ss)" },
            min: new Date(`${targetDate}T00:00:00`),
            max: new Date(`${targetDate}T23:59:59`),
            ticks: {
              stepSize: 1,
              callback: function(value) {
                return luxon.DateTime.fromMillis(value).toFormat("HH:00");
              }
            }
          },
          y: {
            beginAtZero: true,
            ticks: {
              precision: 0,
              stepSize: 1,
              callback: function(value) {
                return Number.isInteger(value) ? value : null;
              }
            },
            title: { display: true, text: "반복 행동 수" }
          }
        }
      }
    });

  } catch (err) {
    console.error("❌ 시간대별 데이터 로딩 실패:", err);
  }
}


  // API에서 일별 반복 행동 수집하여 주간 차트 표시
  async function loadWeeklyChart(weeks = 1) {
    const today = new Date();
    const start = new Date(today);
    start.setDate(today.getDate() - (7 * weeks - 1));

    const res = await fetch(`${API_BASE}/stats/aggregate?type=daily`);
    const rawData = await res.json();

    const filtered = rawData.filter(d => {
      const date = new Date(d._id);
      return date >= start && date <= today;
    });

    const labels = filtered.map(d => {
      const [y, m, d2] = d._id.split("-");
      return `${m}-${d2}`;
    });
    const data = filtered.map(d => d.total_repetition);

    if (weeklyChart) weeklyChart.destroy();
    weeklyChart = new Chart(document.getElementById("weeklyChart"), {
      type: "line",
      data: {
        labels,
        datasets: [{
          label: "일별 반복 행동",
          data,
          borderColor: "#0d6efd",
          backgroundColor: "rgba(13,110,253,0.1)",
          tension: 0.3,
          fill: true
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: {
            ticks: {
              autoSkip: false,
              maxRotation: 45,
              minRotation: 45
            }
          },
          y: {
            beginAtZero: true,
            ticks: {
              precision: 0,
              stepSize: 1
            }
          }
        }
      }
    });
    document.getElementById("weeklyChartTitle").textContent = `${weeks}주 동안의 반복 행동 발생 추이`;
    document.getElementById("weekRangeLabel").textContent = `최근 ${weeks * 7}일`;
  }

  // API에서 월별 행동 수집하여 연간 차트 표시
  async function loadMonthlyChart(year = new Date().getFullYear()) {
    const res = await fetch(`${API_BASE}/stats/aggregate?type=monthly&year=${year}`);
    const rawData = await res.json();

    // 1월~12월 고정 라벨
    const labels = Array.from({ length: 12 }, (_, i) => `${i + 1}월`);
    // 기본 데이터 0으로 초기화
    const data = new Array(12).fill(0);

    for (const d of rawData) {
  const [y, m] = d._id.split("-");  // "2025-07"
  if (Number(y) === year) {
    const monthIndex = Number(m) - 1;
    data[monthIndex] = d.total_repetition;
  }
}

    if (monthlyChart) monthlyChart.destroy();
    monthlyChart = new Chart(document.getElementById("monthlyChart"), {
      type: "bar",
      data: {
        labels,
        datasets: [{
          label: `${year}년 월별 반복 행동`,
          data,
          backgroundColor: "#20c997"
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              precision: 0,
              stepSize: 1
            }
          }
        }
      }
    });
  }

  // 연도 필터 및 검색 함수
  function filterByYear() {
    const inputYear = Number(document.getElementById("yearInput").value);
    if (!inputYear || inputYear < 2000 || inputYear > 2100) {
      alert("올바른 연도를 입력하세요 (2000 ~ 2100)");
      return;
    }
    loadMonthlyChart(inputYear);
  }

  // 웹페이지 최초 로드 시 차트/영상 불러오기
  async function loadAllCharts() {
    await fetchS3Videos();
    await loadTodayChart();
    await loadWeeklyChart(currentWeekRange);
    await loadMonthlyChart();
  }

  // 기간 조정 버튼 클릭 시 주간 차트 갱신
  window.onload = () => {
    document.getElementById("prevRange").addEventListener("click", () => {
      currentWeekRange = currentWeekRange === 1 ? 4 : currentWeekRange - 1;
      document.getElementById("weekRangeLabel").textContent = `최근 ${currentWeekRange * 7}일`;
      loadWeeklyChart(currentWeekRange);
    });

    document.getElementById("nextRange").addEventListener("click", () => {
      currentWeekRange = currentWeekRange === 4 ? 1 : currentWeekRange + 1;
      document.getElementById("weekRangeLabel").textContent = `최근 ${currentWeekRange * 7}일`;
      loadWeeklyChart(currentWeekRange);
    });

    loadAllCharts();

    // 오늘의 차트 날짜 검색
    document.getElementById("daily-date").addEventListener("input", e => {
      const selectedDate = e.target.value;
      if (selectedDate) {
          loadTodayChart(selectedDate);

          // 날짜 문자열을 보기 좋은 형태로 변환
          // 필요에 따라 Date 객체로 포맷 변경 가능
          document.getElementById("dailyChartTitle").textContent = `반복 행동 발생 시각 (기준: ${selectedDate})`;
      } else {
          // 선택 취소 시 기본 문구로 돌아감
          document.getElementById("dailyChartTitle").textContent = "반복 행동 발생 시각 (기준: 선택 날짜)";
      }
    });

    // 오늘 날짜를 기본 선택으로 설정
    const today = new Date().toISOString().split("T")[0];
    document.getElementById("daily-date").value = today;
    loadTodayChart(today);
    document.getElementById("dailyChartTitle").textContent = `반복 행동 발생 시각 추이 (기준: ${today})`;

  };

</script>

</body>

</html>
